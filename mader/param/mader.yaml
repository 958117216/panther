use_ff: true # use feedforward
visual: true #publish visualization stuff
color_type: "vel" #"vel" or "plain"
n_agents: 16 #only used for the color in the trajectory

dc: 0.01            #(seconds) Duration for the interpolation=Value of the timer pubGoal
goal_radius: 0.05    #(m) Drone has arrived to the goal when distance_to_goal<GOAL_RADIUS
drone_radius: 0.001  #(m) Used for collision checking

Ra: 4.0           # [m] Radius of my planning sphere (planning horizon). Should be < fov_depth

x_min: -1000000000.0  # [m] don't forget the .0
x_max: 10000000000.0  # [m] don't forget the .0

y_min: -1000000000.0  # [m] don't forget the .0
y_max: 1000000000.0   # [m] don't forget the .0

z_min: -1000000000.0         #[m] points below this are considered ground
z_max: 1000000000.0         #[m] JPS is not allowed to give a solution that goes higher than this height

#For multi-agent simulations
# v_max: [2.5, 2.5, 2.5]   #[m/s]  
# a_max: [30.0, 30.0, 9.6]   #[m/s2] 

#For single-agent simulations
v_max: [2.6, 2.6, 2.6]   #[m/s]  7.0
a_max: [20.0, 20.0, 9.6]   #[m/s2] Note that if a_max.z() > 9.81, the drone may flip
j_max: [100.0, 100.0, 100.0]   #[m/s2] Note that if a_max.z() > 9.81, the drone may flip
ydot_max: 4.0           # [rd/s] Maximum angular velocity. 0.4 for Hardware

factor_alpha: 1.5 #[-] DeltaT = factor_alpha*States_took_previous_replan

#Parameters for the yaw search
c_smooth_yaw_search: 0.0
c_visibility_yaw_search: 1.0 
# num_of_layers --> this one comes from Matlab, it's = num_samples_simpson 
# num_of_yaw_per_layer --> this one comes from Matlab

#Parameters for Casadi
c_jerk: 0.0000
c_yaw: 0.00001
c_fov: 1.0
c_final_pos: 20

# kappa + mu <=1 Ideally kappa + mu<1 (so that there is time for other stuff)
upper_bound_runtime_snlopt: 0.35 #[seconds] snlopt (init guess + solver) will never take longer than this amount of seconds
lower_bound_runtime_snlopt: 0.05 #[seconds] snlopt (init guess + solver) will never take less than this amount of seconds
kappa: 0.4 #% of time spent to find initial guess
mu: 0.4    #% of time spent to solve the optimization

# Samples in velocity for the A* guess used in the nlopt optimization problem
a_star_samp_x: 5
a_star_samp_y: 5 
a_star_samp_z: 5 
a_star_fraction_voxel_size: 0.5 #\in [0,1] The higher, the bigger the voxel size in A* is(i.e. more prunning)
allow_infeasible_guess: true  #whether allow infeasible guesses to be used for the optimization. If false, straight line guess will be used in the case of an infeasible guess

a_star_bias: 1.0 #Bias (cost=g+bias*h) in the A* search 

basis: "MINVO"  #MINVO OR B_SPLINE or BEZIER This is the basis used only for collision checking

res_plot_traj: 15.0  #Higher --> More resolution when plotting the trajectory 
factor_v_max: 1.0 #\in [0,1]. Used to find the total duration of a given trajectory.
alpha_shrink: 0.95 #\in [0,1] Only used for MINVO/Bezier

alpha: 0.0 #[m] Error in position
beta: 0.0 #[m] Deviation between the trajectory and the segment between two discretization points
gamma: 0.1 #[seconds] >0 Time step between discretization points


##########################################
##Needed: Ra <= fov_depth  <= R_local_map
##Agents/obstacles from which I am allowed to receive information:
# impose_fov: false
# R_local_map: 5.5 #[m] Trajectories from obstacles/agents whose center falls inside this local map are stored

##### Not used in the MADER algorithm
fov_x_deg: 80 #[deg] \in (0,180] ,  angle between two faces of the tetrahedron. Horizontal FOV
fov_y_deg: 80 #[deg] \in (0,180] ,  angle between two faces of the tetrahedron. Vertical FOV
fov_depth: 4.5 #[m] Should be < Ra

#####If impose_fov==false
#R_consider_agents: 900       # [m] Other agents are considered if they are closer than Rothers. Should be >=2*Ra (because this ensures that the other agent hasn't planned a trajectory that enters my sphere of radius Ra)
#R_consider_obstacles: 7.0    # [m] Other obstacles are considered if they are closer than Rothers.
##########################################