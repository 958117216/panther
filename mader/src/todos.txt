
En este repo:
	
	Behaviour look ahead when obstacle is done
	Prepare HW experiment trajectories obstacles
	max_runtime_casadi + mu and kappa delta_t for initial guess?
	select via roslaunch if I want trajectories_predicted or trajectories_gtruth. Rename /trajs to /trajs_ground_truth
	Predict the uncertainty and apply it to the polyhedra
	Check isInFOV_smooth in main (pyramid)
	WHen using the cost (\phi-phi_tf)^2, include that on the yaw graph search (and in its heuristics)?
	What happens at the end of the trajectory (weird)
	Check costs for the HW experiments
	Wait duration for looking up transform in tracker
	Como decidir entre varios obstaculos (ahora cojo traj_0 creo)
	Create a dataset of the moving objects from the experiments??	

	Check the partial derivatives of velocity of the obstacle in the cost function is right
	Cuidado que los assert() SOLO funcionan en debug mode, no en release mode.
	Check if the obj function chosen is the best one

	Enable the -O3 option when compiling all the mader package (and change to release mode, not release with info)
	Check la heuristics del graph del yaw
	See %TODO: should we include total_time here below? in main.m
	Check that the T matrix in the tracker is the right one (and not its inverse)
	Add VIO term in the cost function
	The FOV of Gazebo should be consistent with fov_x_deg and fov_y_deg
	max_cpu in jetson

	Check max_number_of_obstacles (creo que ahora hago abort())


	Why do I have to run matlab from the terminal (https://github.com/casadi/casadi/issues/2032)? If not (and I use the opts.ipopt.linear_solver option) I get the error
					Exception of type: OPTION_INVALID in file "../../../../Ipopt/src/Algorithm/IpAlgBuilder.cpp" at line 321:
					 Exception message: Selected linear solver MA27 not available.
					Tried to obtain MA27 from shared library "libhsl.so", but the following error occured:
					libhsl.so: cannot open shared object file: No such file or directory
	I've already tried adding setenv('LD_LIBRARY_PATH', ':/usr/local/lib') in startup.m

	Limit visualization stuff when timing Algorithm

	If I want the guesses to be feasible (right now I'm not committing to them):
		Cuidado que guess_yaw doesn't use the constraint yaw_dot_max, while the optimization problem does
		Cuidado que guess_pos doesn't use the constraint jerk_max, while the optimization problem does
		Make sure qyaw_guess is feasible (in case I commit to it when ipopt doesn't find a solution)


Future/enhancements:
	Schur complement to avoid inverting the whole matrix?
	The predictor should use the pwp field (instead of the string field) of dynTraj. This will require changes in mader.cpp (how is_agent is used)
	Yaw generator should go to a different class
	See what to do when boost() doesn't find a path (end of yaw_guess_generator.cpp) [right now there is an abort(), since it should never happen]
	See https://pointclouds.org/documentation/classpcl_1_1_shadow_points.html#details
	Rename all the yaws to phi
	Improve the way new obstacles are added (instead of creating the file tmp.urdf and then deleting it)
	Play more with other linear solvers for Ipopt (hsl ones, like ma57, ma27,...) [check email]
	Should I leave the planes fixed or as decision variables??




Novale:
	Have a look at https://www.mathworks.com/help/curvefit/fnxtr.html
	Hungarian Algorithm: 
		See https://github.com/srianant/kalman_filter_multi_object_tracking/blob/master/tracker.py
		and https://github.com/t3nsor/codebook/blob/master/bipartite-mincost.cpp

Done: 
	Circular statistics, circular regression for the yaw 

Decir en el paper:
	In the graph for the yaw, we are imposing the yaw_dot_max en las conexiones de los yaw angles (with very high cost)

Papers to cite in proposal/Paper:
	https://arxiv.org/pdf/1904.03421.pdf
	https://www.youtube.com/watch?v=JosFzstiH9U
	https://www.youtube.com/watch?v=BzykucxFddI
	http://asl.stanford.edu/wp-content/papercite-data/pdf/Allen.Pavone.RAS18.pdf
	Camera active rotation (Andrea's paper)
	Cite HSL (AS A CONDITION OF THE LICENCE, ALL USE SHOULD BE CITED AS:
	"HSL(2013). A collection of Fortran codes for large scale scientific
	 computation. http://www.hsl.rl.ac.uk")

	https://arxiv.org/pdf/2003.05138.pdf


En MADER:
	Try creating a NLOPT object each time. 
	Cuidado que los assert() SOLO funcionan en debug mode, no en release mode.








