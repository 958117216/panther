% Produced by CVXGEN, 2020-06-13 17:15:50 -0400.
% CVXGEN is Copyright (C) 2006-2017 Jacob Mattingley, jem@cvxgen.com.
% The code in this file is Copyright (C) 2006-2017 Jacob Mattingley.
% CVXGEN, or solvers produced by CVXGEN, cannot be used for commercial
% applications without prior written permission from Jacob Mattingley.

% Filename: cvxsolve.m.
% Description: Solution file, via cvx, for use with sample.m.
function [vars, status] = cvxsolve(params, settings)
MAcol0 = params.MAcol0;
MAcol1 = params.MAcol1;
MAcol2 = params.MAcol2;
MBcol0 = params.MBcol0;
MBcol1 = params.MBcol1;
MBcol2 = params.MBcol2;
MCcol0 = params.MCcol0;
MCcol1 = params.MCcol1;
MCcol2 = params.MCcol2;
v_max = params.v_max;
viM1 = params.viM1;
viM2 = params.viM2;
cvx_begin
  % Caution: automatically generated by cvxgen. May be incorrect.
  variable a(3, 1);
  variable b(3, 1);
  variable c(3, 1);

  minimize(sum(a));
  subject to
    abs(MAcol0(1)*viM2(1) + MAcol0(2)*viM1(1) + MAcol0(3)*a(1)) <= v_max;
    abs(MAcol1(1)*viM2(1) + MAcol1(2)*viM1(1) + MAcol1(3)*a(1)) <= v_max;
    abs(MAcol2(1)*viM2(1) + MAcol2(2)*viM1(1) + MAcol2(3)*a(1)) <= v_max;
    abs(MAcol0(1)*viM2(2) + MAcol0(2)*viM1(2) + MAcol0(3)*a(2)) <= v_max;
    abs(MAcol1(1)*viM2(2) + MAcol1(2)*viM1(2) + MAcol1(3)*a(2)) <= v_max;
    abs(MAcol2(1)*viM2(2) + MAcol2(2)*viM1(2) + MAcol2(3)*a(2)) <= v_max;
    abs(MAcol0(1)*viM2(3) + MAcol0(2)*viM1(3) + MAcol0(3)*a(3)) <= v_max;
    abs(MAcol1(1)*viM2(3) + MAcol1(2)*viM1(3) + MAcol1(3)*a(3)) <= v_max;
    abs(MAcol2(1)*viM2(3) + MAcol2(2)*viM1(3) + MAcol2(3)*a(3)) <= v_max;
    abs(MBcol0(1)*viM1(1) + MBcol0(2)*a(1) + MBcol0(3)*b(1)) <= v_max;
    abs(MBcol1(1)*viM1(1) + MBcol1(2)*a(1) + MBcol1(3)*b(1)) <= v_max;
    abs(MBcol2(1)*viM1(1) + MBcol2(2)*a(1) + MBcol2(3)*b(1)) <= v_max;
    abs(MBcol0(1)*viM1(2) + MBcol0(2)*a(2) + MBcol0(3)*b(2)) <= v_max;
    abs(MBcol1(1)*viM1(2) + MBcol1(2)*a(2) + MBcol1(3)*b(2)) <= v_max;
    abs(MBcol2(1)*viM1(2) + MBcol2(2)*a(2) + MBcol2(3)*b(2)) <= v_max;
    abs(MBcol0(1)*viM1(3) + MBcol0(2)*a(3) + MBcol0(3)*b(3)) <= v_max;
    abs(MBcol1(1)*viM1(3) + MBcol1(2)*a(3) + MBcol1(3)*b(3)) <= v_max;
    abs(MBcol2(1)*viM1(3) + MBcol2(2)*a(3) + MBcol2(3)*b(3)) <= v_max;
    abs(MCcol0(1)*a(1) + MCcol0(2)*b(1) + MCcol0(3)*c(1)) <= v_max;
    abs(MCcol1(1)*a(1) + MCcol1(2)*b(1) + MCcol1(3)*c(1)) <= v_max;
    abs(MCcol2(1)*a(1) + MCcol2(2)*b(1) + MCcol2(3)*c(1)) <= v_max;
    abs(MCcol0(1)*a(2) + MCcol0(2)*b(2) + MCcol0(3)*c(2)) <= v_max;
    abs(MCcol1(1)*a(2) + MCcol1(2)*b(2) + MCcol1(3)*c(2)) <= v_max;
    abs(MCcol2(1)*a(2) + MCcol2(2)*b(2) + MCcol2(3)*c(2)) <= v_max;
    abs(MCcol0(1)*a(3) + MCcol0(2)*b(3) + MCcol0(3)*c(3)) <= v_max;
    abs(MCcol1(1)*a(3) + MCcol1(2)*b(3) + MCcol1(3)*c(3)) <= v_max;
    abs(MCcol2(1)*a(3) + MCcol2(2)*b(3) + MCcol2(3)*c(3)) <= v_max;
cvx_end
vars.a = a;
vars.b = b;
vars.c = c;
status.cvx_status = cvx_status;
% Provide a drop-in replacement for csolve.
status.optval = cvx_optval;
status.converged = strcmp(cvx_status, 'Solved');
