% Control points are p0, ..., pn





M4=(1/(3*2))*[1 4 1 0;
              -3 0 3 0;
              3 -6 3 0;
              -1 3 -3 1];
B=[1 t t*t t*t*t]*M4*[p_i];



deg_polynomials=3;
num_polynomials=5;

p=deg_polynomials;
M=num_polynomials+2*p;
N=M-p-1;

%Variables
%Control Points
Q=[];
for i=0:N
   Q=[Q sdpvar(2,1)];
end
   

%objective
obj=0;
for i=0:N
    obj=obj  + (norm(Q(i+1)-Q(i)) + norm(Q(i-1)-Q(i)))^2;
end

%constraints
constraints=[];
for w=0:N-4
    dc=norm(Q(w+4)-v);
    constraints=[constraints dc>0];
    constraints=[constraints norm(Q(w+3)-Q(w+2))<(dc/3)];
    constraints=[constraints norm(Q(w+2)-Q(w+1))<(dc/3)];
    constraints=[constraints norm(Q(w+1)-Q(w+0))<(dc/3)];
end


function getPos()

    M_i=[3]*pr3
end

    Q=sdpvar(6,1);
    Rd=sdpvar(3,3,'full'); %Rotation Matrix
    delta=sdpvar(1);
    
    

constraints=[sum(b)==number_of_points]; %Number of points chosen
objective = -trace(A);
settings=sdpsettings('solver','bnb','bnb.solver','sdpt3');
disp('Starting optimization') %'solver','bmibnb'  ,'solver','sdpt3'
result=optimize(constraints,objective,sdpsettings(settings,'showprogress',1,'verbose',2,'debug',0 )); 
result.info
disp('Finished optimization')
