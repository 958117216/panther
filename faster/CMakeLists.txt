cmake_minimum_required(VERSION 2.8.3)
project(faster)



## Add support for C++11, supported in ROS Kinetic and newer
add_definitions(-std=c++11)
#add_definitions(-std=c99)


#For unity build, 
#See example https://gist.github.com/AlexsJones/0a574d32a0541a384f81
function(enable_unity_build UB_SUFFIX SOURCE_VARIABLE_NAME)
  set(files ${${SOURCE_VARIABLE_NAME}})
  # Generate a unique filename for the unity build translation unit
  set(unit_build_file ${CMAKE_CURRENT_BINARY_DIR}/ub_${UB_SUFFIX}.cpp)
  # Exclude all translation units from compilation
  set_source_files_properties(${files} PROPERTIES HEADER_FILE_ONLY true)
  # Open the ub file
  FILE(WRITE ${unit_build_file} "// Unity Build generated by CMake\n")
  # Add include statement for each translation unit
  foreach(source_file ${files} )
    FILE( APPEND ${unit_build_file} "#include <${CMAKE_CURRENT_SOURCE_DIR}/${source_file}>\n")
  endforeach(source_file)
  # Complement list of translation units with the name of ub
  set(${SOURCE_VARIABLE_NAME} ${${SOURCE_VARIABLE_NAME}} ${unit_build_file} PARENT_SCOPE) 
endfunction(enable_unity_build)


#find_program(iwyu_path NAMES /home/jtorde/iwyu/build/include-what-you-use)

#if(NOT iwyu_path)
#  message(FATAL_ERROR "Could not find the program include-what-you-use")
#endif()

find_package( Eigen3 REQUIRED )
include_directories(${EIGEN3_INCLUDE_DIR})


list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}")

find_package(NLOPT REQUIRED)
find_package(CGAL REQUIRED)
include(${CGAL_USE_FILE})



set(CMAKE_BUILD_TYPE Release) #From terminal: catkin config -DCMAKE_BUILD_TYPE=Release (or RelWithDebInfo) or Debug


#First of all, compile the CVXGEN files
# add_custom_command(OUTPUT libcvx.so COMMAND make -C /home/jtorde/Desktop/ws/src/faster/faster/src/solvers/cvxgen/cvxgen)
# add_custom_target(cvxgen_is_compiled ALL DEPENDS libcvx.so)


find_package(catkin REQUIRED COMPONENTS 
	roscpp
	rospy
	snapstack_msgs
	faster_msgs
	sensor_msgs
	decomp_util
	decomp_ros_utils
	rviz_visual_tools
	separator
  jsk_rviz_plugins
)
find_package(decomp_util REQUIRED)
include_directories(${DECOMP_UTIL_INCLUDE_DIRS})

find_package(jps3d REQUIRED)
include_directories(${JPS3D_INCLUDE_DIRS})

catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES cvx
#  CATKIN_DEPENDS other_catkin_pkg
#  DEPENDS system_lib
)

include_directories(${catkin_INCLUDE_DIRS})


#For precompile headers see example here
#https://gitlab.kitware.com/cmake/cmake/tree/375d01c6808713a0cfeef9ea092c8236ba063525/Tests/PrecompileHeaders

add_library(cgal_utils STATIC src/cgal_utils)
target_include_directories (cgal_utils PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_link_libraries(cgal_utils PUBLIC ${DECOMP_UTIL_LIBRARIES} ${catkin_LIBRARIES})

add_library(utils STATIC src/utils.cpp src/utils.hpp)
target_include_directories (utils PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_link_libraries(utils PUBLIC ${catkin_LIBRARIES})

add_library(spline_AStar STATIC src/spline_AStar.cpp src/solvers/cvxgen/solver_cvxgen.cpp)
target_include_directories (spline_AStar PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_link_libraries(spline_AStar PUBLIC ${catkin_LIBRARIES} ${CMAKE_CURRENT_LIST_DIR}/src/solvers/cvxgen/cvxgen/libcvx.so)


add_library(solverNlopt STATIC src/solvers/nlopt/solverNlopt.cpp src/solvers/nlopt/solverNlopt.hpp src/bspline_utils.cpp src/solvers/nlopt/nlopt_utils.cpp )
target_include_directories (solverNlopt PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} ${DECOMP_UTIL_INCLUDE_DIRS})
target_link_libraries(solverNlopt PUBLIC ${NLOPT_LIBRARIES} ${DECOMP_UTIL_LIBRARIES} utils spline_AStar ${catkin_LIBRARIES} cgal_utils)


# add_library(faster STATIC src/faster.cpp src/faster.hpp)
# #set_property(TARGET faster PROPERTY CXX_INCLUDE_WHAT_YOU_USE ${iwyu_path})
# target_include_directories (faster PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
# target_link_libraries(faster PUBLIC utils ${CGAL_LIBS} solverNlopt)


# add_library(faster_ros STATIC src/faster_ros.cpp src/faster_ros.hpp src/faster.cpp src/faster.hpp)
# target_include_directories (faster_ros PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
# target_link_libraries(faster_ros PUBLIC ${catkin_LIBRARIES}  solverNlopt utils)


# enable_unity_build(UNITY_BUILD_NAME src/main.cpp)

add_executable(${PROJECT_NAME}_node src/main.cpp src/faster_ros.cpp src/faster_ros.hpp src/faster.cpp src/faster.hpp)
target_link_libraries(${PROJECT_NAME}_node PUBLIC ${catkin_LIBRARIES}  solverNlopt utils)  #${CGAL_LIBS}
add_dependencies(${PROJECT_NAME}_node ${catkin_EXPORTED_TARGETS} )

add_executable(astar_example src/testSplineAStar.cpp src/spline_AStar.cpp src/bspline_utils.cpp src/solvers/cvxgen/solver_cvxgen.cpp)
add_dependencies(astar_example ${catkin_EXPORTED_TARGETS} )
target_link_libraries(astar_example ${catkin_LIBRARIES} utils cgal_utils ${CMAKE_CURRENT_LIST_DIR}/src/solvers/cvxgen/cvxgen/libcvx.so)

add_executable(test_utils src/test_utils.cpp)
add_dependencies(test_utils ${catkin_EXPORTED_TARGETS})
target_link_libraries(test_utils ${catkin_LIBRARIES} utils)


add_executable(test_bspline_utils src/test_bspline_utils.cpp src/bspline_utils.cpp)
add_dependencies(test_bspline_utils ${catkin_EXPORTED_TARGETS})
target_link_libraries(test_bspline_utils ${catkin_LIBRARIES})

# add_executable(predictor_node src/predictor_node.cpp src/predictor.cpp src/bspline_utils.cpp)
# add_dependencies(predictor_node ${catkin_EXPORTED_TARGETS})
# target_link_libraries(predictor_node ${catkin_LIBRARIES} utils)


# add_executable(test_predictor_node src/test_predictor.cpp src/predictor.cpp src/bspline_utils.cpp)
# add_dependencies(test_predictor_node ${catkin_EXPORTED_TARGETS})
# target_link_libraries(test_predictor_node ${catkin_LIBRARIES} utils)


# add_executable(test_cvxgen src/solvers/cvxgen/test_cvxgen.cpp src/solvers/cvxgen/solver_cvxgen.cpp)
# add_dependencies(test_cvxgen ${catkin_EXPORTED_TARGETS})
# target_link_libraries(test_cvxgen ${catkin_LIBRARIES} ${catkin_LIBRARIES} ${CMAKE_CURRENT_LIST_DIR}/src/solvers/cvxgen/cvxgen/libcvx.so)