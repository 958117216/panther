--> Stop condition is not a safe condition in dynamic world

--> Distintos origenes de tiempo (debo tener en cuenta delta_T)

--> Tener en cuenta delta_T y ajustar el runtime de la optimization according to that

--> Get last feasible solution if it fails

--> Explicar la formula para minimizar el jerk (no la he visto usar en otros papers)

--> El paso de B-Spline a Bezier ya lo hizo el paper "Real-time Trajectory Generation for quads using B-spline based Non-uniform Kinodynamic Search". Pero el paso de Bezier al de menor volumen no lo ha hecho nadie de planning (aunque fue demostrado en el paper "Polynomial bases for quadratic and cubic polynomials which yield control points with small convex hulls")

--> Options para la initial guess:
------> Run JPS con dynamic obstacle = static obstacle
------> Run 
------> My algorithm

Should I optimize further the initial guess, or should I go with the last feasible solution?


La forma correcta de hacerlo es ir creando libraries en el CMakeLists.txt