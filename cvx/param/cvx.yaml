# Params for CVX planner
#debug: true

wdx: 20.0  #[m] world dimension in x
wdy: 20.0  #[m] world dimension in y
wdz: 4.0   #[m] world dimension in z
res: 0.15  #[m] cell dimension


dc: 0.01            #(seconds) Duration for the interpolation=Value of the timer pubGoal
goal_radius: 0.2    #(m) Drone has arrived to the goal when distance_to_goal<GOAL_RADIUS
drone_radius: 0.15  #(m) Used for collision checking


offset: 5  # Replanning offset (the initial conditions are taken OFFSET states farther from the last published goal)

Ra: 2.0             # [m] Radius of the first sphere
Rb: 6.0             # [m] Radius of the second sphere
w_max: 1            # [rd/s] Maximum angular velocity
alpha_0: 1          #[rd] threshold to ignore current JPS solution, and consider the old one
z_ground: 0         #[m] points below this are considered ground
inflation_jps: 0.8  #[m] The obstacles are inflated (to run JPS) by this amount


v_max: 2.0   #[m/s]
a_max: 2.0   #[m/s2]
j_max: 10.0  #[m/s3]

# # use_memory: true
# safe_distance: 3.0   # Smallest distance before obstacle is no longer viable segment
# sensor_distance: 7.0 # Primitives evaluated up to this distance
# mem_distance: 2.9
# buffer: 0.4        # 0.5 width of quad for collision checking

# # (x,y,z) goal
# goal_x: 50.0
# goal_y: 0.0
# goal_z: 1.0

# # Flight params
# max_speed: 5.0

# jerk: 10 
# accel: 8.0
# accel_stop: 8.0

# # Trajectory evaluation rate
# plan_eval: 0.01

# # Number of samples from k-d tree to find obstacle 
# K: 10

# N_pcl: 4

# time_min: 1.0

# # Sensor horizontal FOV (deg)
# h_fov: 60

# # Number of horizontal FOV discretization
# h_samples: 5

# # Sensor vertical FOV (deg)
# v_fov: 60

# # Number of vertical FOV discretization
# v_samples: 5

# # Max yaw rate (rad/s)
# r_max: 1

# # Maximum tolerable jump in state estimate before replanning
# jump_thresh: 0.5

# # Min and max allowable z values 
# z_min: 0.2
# z_max: 2.0

# # Min and max allowable BL values 
# p_min: 0.5
# p_max: 2.0
# p_dot: 1

# # Goal buffer
# goal_radius: 1.0

# # 2D vs 3D weight (>1 => penaltize 3D)
# W: 5
    